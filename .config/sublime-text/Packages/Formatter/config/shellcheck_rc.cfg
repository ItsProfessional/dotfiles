#!/usr/bin/env bash
# directives_generator.sh
#
# git clone https://github.com/koalaman/shellcheck.wiki.git
# cd shellcheck.wiki
# for file in SC*.md; do
#     filename=$(basename "$file" .md)
#     header=$(head -1 "$file" | perl -p -e 's/\n//g;s/==>/\n/g;')
#     link="[$filename](https://github.com/koalaman/shellcheck/wiki/$filename)"
#
#     echo "# $header"
#     echo "# $link"
#     echo "# disable=$filename"
#     echo
# done

# ShellCheck is primarily designed for linting code.
# It does not have the capability to format code.
# It can only autofix a very limited number of errors.
# It is not well documented which rules support autofix.
# Update: 2023-12-04


# ################## Directive: enable ##################
# Enables an optional check: $ shellcheck --list-optional
# An alias all is available to enable all optional checks.
# enable=all

# name:    add-default-case
# desc:    Suggest adding a default case in `case` statements
# example: case $? in 0) echo 'Success';; esac
# fix:     case $? in 0) echo 'Success';; *) echo 'Fail' ;; esac
# enable=add-default-case

# name:    avoid-nullary-conditions
# desc:    Suggest explicitly using -n in `[ $var ]`
# example: [ "$var" ]
# fix:     [ -n "$var" ]
# enable=avoid-nullary-conditions

# name:    check-extra-masked-returns
# desc:    Check for additional cases where exit codes are masked
# example: rm -r "$(get_chroot_dir)/home"
# fix:     set -e; dir="$(get_chroot_dir)"; rm -r "$dir/home"
# enable=check-extra-masked-returns

# name:    check-set-e-suppressed
# desc:    Notify when set -e is suppressed during function invocation
# example: set -e; func() { cp *.txt ~/backup; rm *.txt; }; func && echo ok
# fix:     set -e; func() { cp *.txt ~/backup; rm *.txt; }; func; echo ok
# enable=check-set-e-suppressed

# name:    check-unassigned-uppercase
# desc:    Warn when uppercase variables are unassigned
# example: echo $VAR
# fix:     VAR=hello; echo $VAR
# enable=check-unassigned-uppercase

# name:    deprecate-which
# desc:    Suggest 'command -v' instead of 'which'
# example: which javac
# fix:     command -v javac
# enable=deprecate-which

# name:    quote-safe-variables
# desc:    Suggest quoting variables without metacharacters
# example: var=hello; echo $var
# fix:     var=hello; echo "$var"
# enable=quote-safe-variables

# name:    require-double-brackets
# desc:    Require [[ and warn about [ in Bash/Ksh
# example: [ -e /etc/issue ]
# fix:     [[ -e /etc/issue ]]
# enable=require-double-brackets

# name:    require-variable-braces
# desc:    Suggest putting braces around all variable references
# example: var=hello; echo $var
# fix:     var=hello; echo ${var}
# enable=require-variable-braces


# ################## Directive: disable ##################
# An alias all is available instead of specifying 0-9999 to disable all checks.
# disable=all

# # `$` is not used specially and should therefore be escaped.
# [SC1000](https://github.com/koalaman/shellcheck/wiki/SC1000)
# disable=SC1000

# ## This `\o` will be a regular 'o' in this context.
# [SC1001](https://github.com/koalaman/shellcheck/wiki/SC1001)
# disable=SC1001

# ## Want to escape a single quote? `echo 'This is how it'\''s done'`.
# [SC1003](https://github.com/koalaman/shellcheck/wiki/SC1003)
# disable=SC1003

# ## This backslash+linefeed is literal. Break outside single quotes if you just want to break the line.
# [SC1004](https://github.com/koalaman/shellcheck/wiki/SC1004)
# disable=SC1004

# # Remove space after `=` if trying to assign a value (or for empty string, use `var=''` ... ).
# [SC1007](https://github.com/koalaman/shellcheck/wiki/SC1007)
# disable=SC1007

# ## This shebang was unrecognized. ShellCheck only supports sh/bash/dash/ksh. Add a 'shell' directive to specify.
# [SC1008](https://github.com/koalaman/shellcheck/wiki/SC1008)
# disable=SC1008

# #  The mentioned parser error was in ...
# [SC1009](https://github.com/koalaman/shellcheck/wiki/SC1009)
# disable=SC1009

# ## Use semicolon or linefeed before `done` (or quote to make it literal).
# [SC1010](https://github.com/koalaman/shellcheck/wiki/SC1010)
# disable=SC1010

# ## This apostrophe terminated the single quoted string!
# [SC1011](https://github.com/koalaman/shellcheck/wiki/SC1011)
# disable=SC1011

# ## `\t` is just literal `t` here. For tab, use `"$(printf '\t')"` instead.
# [SC1012](https://github.com/koalaman/shellcheck/wiki/SC1012)
# disable=SC1012

# ## Use `if cmd; then ..` to check exit code, or `if [ "$(cmd)" = .. ]` to check output.
# [SC1014](https://github.com/koalaman/shellcheck/wiki/SC1014)
# disable=SC1014

# ## This is a unicode double quote. Delete and retype it.
# [SC1015](https://github.com/koalaman/shellcheck/wiki/SC1015)
# disable=SC1015

# ## This is a Unicode single quote. Delete and retype it.
# [SC1016](https://github.com/koalaman/shellcheck/wiki/SC1016)
# disable=SC1016

# ## Literal carriage return. Run script through `tr -d '\r'` .
# [SC1017](https://github.com/koalaman/shellcheck/wiki/SC1017)
# disable=SC1017

# # This is a unicode non-breaking space. Delete it and retype as space.
# [SC1018](https://github.com/koalaman/shellcheck/wiki/SC1018)
# disable=SC1018

# ## Expected this to be an argument to the unary condition.
# [SC1019](https://github.com/koalaman/shellcheck/wiki/SC1019)
# disable=SC1019

# ## You need a space before the `]` or `]]`
# [SC1020](https://github.com/koalaman/shellcheck/wiki/SC1020)
# disable=SC1020

# ## If grouping expressions inside `[[..]]`, use `( .. )`.
# [SC1026](https://github.com/koalaman/shellcheck/wiki/SC1026)
# disable=SC1026

# ## Expected another argument for this operator.
# [SC1027](https://github.com/koalaman/shellcheck/wiki/SC1027)
# disable=SC1027

# ## In `[..]` you have to escape `\( \)` or preferably combine `[..]` expressions.
# [SC1028](https://github.com/koalaman/shellcheck/wiki/SC1028)
# disable=SC1028

# ## In `[[..]]` you shouldn't escape `(` or `)`.
# [SC1029](https://github.com/koalaman/shellcheck/wiki/SC1029)
# disable=SC1029

# ## Test expression was opened with double `[[` but closed with single `]`. Make sure they match.
# [SC1033](https://github.com/koalaman/shellcheck/wiki/SC1033)
# disable=SC1033

# ## Test expression was opened with double `[` but closed with single `]]`. Make sure they match.
# [SC1034](https://github.com/koalaman/shellcheck/wiki/SC1034)
# disable=SC1034

# ## You need a space here
# [SC1035](https://github.com/koalaman/shellcheck/wiki/SC1035)
# disable=SC1035

# ## `(` is invalid here. Did you forget to escape it?
# [SC1036](https://github.com/koalaman/shellcheck/wiki/SC1036)
# disable=SC1036

# ## Braces are required for positionals over 9, e.g. `${10}`.
# [SC1037](https://github.com/koalaman/shellcheck/wiki/SC1037)
# disable=SC1037

# ## Shells are space sensitive. Use `< <(cmd)`, not `<<(cmd)`.
# [SC1038](https://github.com/koalaman/shellcheck/wiki/SC1038)
# disable=SC1038

# ## Remove indentation before end token (or use `<<-` and indent with tabs).
# [SC1039](https://github.com/koalaman/shellcheck/wiki/SC1039)
# disable=SC1039

# ## When using `<<-`, you can only indent with tabs.
# [SC1040](https://github.com/koalaman/shellcheck/wiki/SC1040)
# disable=SC1040

# ## Found `eof` further down, but not on a separate line.
# [SC1041](https://github.com/koalaman/shellcheck/wiki/SC1041)
# disable=SC1041

# ## Found EOF further down, but with wrong casing.
# [SC1043](https://github.com/koalaman/shellcheck/wiki/SC1043)
# disable=SC1043

# ## Couldn't find end token `EOF` in the here document.
# [SC1044](https://github.com/koalaman/shellcheck/wiki/SC1044)
# disable=SC1044

# # It's not `foo &; bar`, just `foo & bar`.
# [SC1045](https://github.com/koalaman/shellcheck/wiki/SC1045)
# disable=SC1045

# ## Couldn't find `fi` for this `if`.
# [SC1046](https://github.com/koalaman/shellcheck/wiki/SC1046)
# disable=SC1046

# ## Expected `fi` matching previously mentioned `if`.
# [SC1047](https://github.com/koalaman/shellcheck/wiki/SC1047)
# disable=SC1047

# ## Can't have empty then clauses (use `true` as a no-op).
# [SC1048](https://github.com/koalaman/shellcheck/wiki/SC1048)
# disable=SC1048

# ## Did you forget the `then` for this `if`?
# [SC1049](https://github.com/koalaman/shellcheck/wiki/SC1049)
# disable=SC1049

# ## Expected `then`.
# [SC1050](https://github.com/koalaman/shellcheck/wiki/SC1050)
# disable=SC1050

# ## Semicolons directly after `then` are not allowed. Just remove it.
# [SC1051](https://github.com/koalaman/shellcheck/wiki/SC1051)
# disable=SC1051

# ## Semicolons directly after `then` are not allowed. Just remove it.
# [SC1052](https://github.com/koalaman/shellcheck/wiki/SC1052)
# disable=SC1052

# ## Semicolons directly after `else` are not allowed. Just remove it.
# [SC1053](https://github.com/koalaman/shellcheck/wiki/SC1053)
# disable=SC1053

# ## You need a space after the `{`.
# [SC1054](https://github.com/koalaman/shellcheck/wiki/SC1054)
# disable=SC1054

# ## You need at least one command here. Use `true;` as a no-op.
# [SC1055](https://github.com/koalaman/shellcheck/wiki/SC1055)
# disable=SC1055

# ## Expected a `}`. If you have one, try a `;` or `\n` in front of it.
# [SC1056](https://github.com/koalaman/shellcheck/wiki/SC1056)
# disable=SC1056

# ## Did you forget the `do` for this loop?
# [SC1057](https://github.com/koalaman/shellcheck/wiki/SC1057)
# disable=SC1057

# ## Expected `do`.
# [SC1058](https://github.com/koalaman/shellcheck/wiki/SC1058)
# disable=SC1058

# ## Semicolon is not allowed directly after `do`. You can just delete it.
# [SC1059](https://github.com/koalaman/shellcheck/wiki/SC1059)
# disable=SC1059

# ## Can't have empty do clauses (use `true` as a no-op)
# [SC1060](https://github.com/koalaman/shellcheck/wiki/SC1060)
# disable=SC1060

# ## Couldn't find `done` for this `do`.
# [SC1061](https://github.com/koalaman/shellcheck/wiki/SC1061)
# disable=SC1061

# ## Expected `done` matching previously mentioned `do`.
# [SC1062](https://github.com/koalaman/shellcheck/wiki/SC1062)
# disable=SC1062

# ## You need a line feed or semicolon before the `do`.
# [SC1063](https://github.com/koalaman/shellcheck/wiki/SC1063)
# disable=SC1063

# ## Expected a `{` to open the function definition.
# [SC1064](https://github.com/koalaman/shellcheck/wiki/SC1064)
# disable=SC1064

# ## Trying to declare parameters? Don't. Use `()` and refer to params as `$1`, `$2`, ..
# [SC1065](https://github.com/koalaman/shellcheck/wiki/SC1065)
# disable=SC1065

# ## Don't use `$` on the left side of assignments.
# [SC1066](https://github.com/koalaman/shellcheck/wiki/SC1066)
# disable=SC1066

# ## For indirection, use arrays, `declare "var$n=value"`, or (for sh) `read`/`eval`
# [SC1067](https://github.com/koalaman/shellcheck/wiki/SC1067)
# disable=SC1067

# # Don't put spaces around the `=` in assignments.
# [SC1068](https://github.com/koalaman/shellcheck/wiki/SC1068)
# disable=SC1068

# ## You need a space before the `[`.
# [SC1069](https://github.com/koalaman/shellcheck/wiki/SC1069)
# disable=SC1069

# #!/usr/bin/env bash
# [SC107](https://github.com/koalaman/shellcheck/wiki/SC107)
# disable=SC107

# ## Parsing stopped here. Mismatched keywords or invalid parentheses?
# [SC1070](https://github.com/koalaman/shellcheck/wiki/SC1070)
# disable=SC1070

# ## ShellCheck only supports sh/bash/dash/ksh scripts. Sorry!
# [SC1071](https://github.com/koalaman/shellcheck/wiki/SC1071)
# disable=SC1071

# # Unexpected ..
# [SC1072](https://github.com/koalaman/shellcheck/wiki/SC1072)
# disable=SC1072

# # Couldn't parse this (thing). Fix to allow more checks.
# [SC1073](https://github.com/koalaman/shellcheck/wiki/SC1073)
# disable=SC1073

# ## Did you forget the `;;` after the previous case item?
# [SC1074](https://github.com/koalaman/shellcheck/wiki/SC1074)
# disable=SC1074

# ## Use `elif` instead of `else if`.
# [SC1075](https://github.com/koalaman/shellcheck/wiki/SC1075)
# disable=SC1075

# ## Trying to do math? Use e.g. `[ $((i/2+7)) -ge 18 ]`.
# [SC1076](https://github.com/koalaman/shellcheck/wiki/SC1076)
# disable=SC1076

# # For command expansion, the tick should slant left (`` ` `` vs `´`).
# [SC1077](https://github.com/koalaman/shellcheck/wiki/SC1077)
# disable=SC1077

# # Did you forget to close this double quoted string?
# [SC1078](https://github.com/koalaman/shellcheck/wiki/SC1078)
# disable=SC1078

# ## This is actually an end quote, but due to next char it looks suspect.
# [SC1079](https://github.com/koalaman/shellcheck/wiki/SC1079)
# disable=SC1079

# ## You need `\` before line feeds to break lines in `[ ]`.
# [SC1080](https://github.com/koalaman/shellcheck/wiki/SC1080)
# disable=SC1080

# ## Scripts are case-sensitive. Use `if`, not `If`.
# [SC1081](https://github.com/koalaman/shellcheck/wiki/SC1081)
# disable=SC1081

# ##  This file has a UTF-8 BOM. Remove it with: `LC_CTYPE=C sed '1s/^...//' < yourscript`.
# [SC1082](https://github.com/koalaman/shellcheck/wiki/SC1082)
# disable=SC1082

# ## This `{`/`}` is literal. Check if `;` is missing or quote the expression.
# [SC1083](https://github.com/koalaman/shellcheck/wiki/SC1083)
# disable=SC1083

# ## Use `#!`, not `!#`, for the shebang.
# [SC1084](https://github.com/koalaman/shellcheck/wiki/SC1084)
# disable=SC1084

# ## Don't use `$` on the iterator name in for loops.
# [SC1086](https://github.com/koalaman/shellcheck/wiki/SC1086)
# disable=SC1086

# ## Use braces when expanding arrays, e.g. `${array[idx]}` (or `${var}[..` to quiet).
# [SC1087](https://github.com/koalaman/shellcheck/wiki/SC1087)
# disable=SC1087

# ## Parsing stopped here. Invalid use of parentheses?
# [SC1088](https://github.com/koalaman/shellcheck/wiki/SC1088)
# disable=SC1088

# ## Parsing stopped here. Is this keyword correctly matched up?
# [SC1089](https://github.com/koalaman/shellcheck/wiki/SC1089)
# disable=SC1089

# ## Can't follow non-constant source. Use a directive to specify location.
# [SC1090](https://github.com/koalaman/shellcheck/wiki/SC1090)
# disable=SC1090

# ## Not following: (error message here)
# [SC1091](https://github.com/koalaman/shellcheck/wiki/SC1091)
# disable=SC1091

# ## Stopping at 100 `source` frames :O
# [SC1092](https://github.com/koalaman/shellcheck/wiki/SC1092)
# disable=SC1092

# ## Parsing of sourced file failed. Ignoring it.
# [SC1094](https://github.com/koalaman/shellcheck/wiki/SC1094)
# disable=SC1094

# ## You need a space or linefeed between the function name and body.
# [SC1095](https://github.com/koalaman/shellcheck/wiki/SC1095)
# disable=SC1095

# ## Unexpected `==`. For assignment, use `=`. For comparison, use `[`/`[[`.
# [SC1097](https://github.com/koalaman/shellcheck/wiki/SC1097)
# disable=SC1097

# ## Quote/escape special characters when using `eval`, e.g. `eval "a=(b)"`.
# [SC1098](https://github.com/koalaman/shellcheck/wiki/SC1098)
# disable=SC1098

# ## You need a space before the `#`.
# [SC1099](https://github.com/koalaman/shellcheck/wiki/SC1099)
# disable=SC1099

# ## This is a unicode dash. Delete and retype as ASCII minus.
# [SC1100](https://github.com/koalaman/shellcheck/wiki/SC1100)
# disable=SC1100

# ## Delete trailing spaces after `\` to break line (or use quotes for literal space).
# [SC1101](https://github.com/koalaman/shellcheck/wiki/SC1101)
# disable=SC1101

# ## Shells disambiguate `$((` differently or not at all. For `$(command substitution)`, add space after `$(` . For `$((arithmetics))`, fix parsing errors.
# [SC1102](https://github.com/koalaman/shellcheck/wiki/SC1102)
# disable=SC1102

# ## This shell type is unknown. Use e.g. `sh` or `bash`.
# [SC1103](https://github.com/koalaman/shellcheck/wiki/SC1103)
# disable=SC1103

# ## Use `#!`, not just `!`, for the shebang.
# [SC1104](https://github.com/koalaman/shellcheck/wiki/SC1104)
# disable=SC1104

# ## Shells disambiguate `((` differently or not at all. If the first `(` should start a subshell, add a space after it.
# [SC1105](https://github.com/koalaman/shellcheck/wiki/SC1105)
# disable=SC1105

# ## In arithmetic contexts, use `<` instead of `-lt`
# [SC1106](https://github.com/koalaman/shellcheck/wiki/SC1106)
# disable=SC1106

# ## This directive is unknown. It will be ignored.
# [SC1107](https://github.com/koalaman/shellcheck/wiki/SC1107)
# disable=SC1107

# ## You need a space before and after the `=` .
# [SC1108](https://github.com/koalaman/shellcheck/wiki/SC1108)
# disable=SC1108

# ## This is an unquoted HTML entity. Replace with corresponding character.
# [SC1109](https://github.com/koalaman/shellcheck/wiki/SC1109)
# disable=SC1109

# ## This is a unicode quote. Delete and retype it (or quote to make literal).
# [SC1110](https://github.com/koalaman/shellcheck/wiki/SC1110)
# disable=SC1110

# ## This is a unicode quote. Delete and retype it (or ignore/singlequote for literal).
# [SC1111](https://github.com/koalaman/shellcheck/wiki/SC1111)
# disable=SC1111

# ## This is a unicode quote. Delete and retype it (or ignore/doublequote for literal).
# [SC1112](https://github.com/koalaman/shellcheck/wiki/SC1112)
# disable=SC1112

# ## Use `#!`, not just `#`, for the shebang.
# [SC1113](https://github.com/koalaman/shellcheck/wiki/SC1113)
# disable=SC1113

# ## Remove leading spaces before the shebang.
# [SC1114](https://github.com/koalaman/shellcheck/wiki/SC1114)
# disable=SC1114

# ## Remove spaces between `#` and `!` in the shebang.
# [SC1115](https://github.com/koalaman/shellcheck/wiki/SC1115)
# disable=SC1115

# ## Missing `$` on a `$((..))` expression? (or use `( (` for arrays).
# [SC1116](https://github.com/koalaman/shellcheck/wiki/SC1116)
# disable=SC1116

# ## Backslash is literal in `"\n"`. Prefer explicit escaping: `"\\n"`.
# [SC1117](https://github.com/koalaman/shellcheck/wiki/SC1117)
# disable=SC1117

# ## Delete whitespace after the here-doc end token.
# [SC1118](https://github.com/koalaman/shellcheck/wiki/SC1118)
# disable=SC1118

# ## Add a linefeed between end token and terminating `)`.
# [SC1119](https://github.com/koalaman/shellcheck/wiki/SC1119)
# disable=SC1119

# ## No comments allowed after here-doc token. Comment the next line instead.
# [SC1120](https://github.com/koalaman/shellcheck/wiki/SC1120)
# disable=SC1120

# ## Add `;`/`&` terminators (and other syntax) on the line with the `<<`, not here.
# [SC1121](https://github.com/koalaman/shellcheck/wiki/SC1121)
# disable=SC1121

# ## Nothing allowed after end token. To continue a command, put it on the line with the `<<`.
# [SC1122](https://github.com/koalaman/shellcheck/wiki/SC1122)
# disable=SC1122

# ## ShellCheck directives are only valid in front of complete compound commands, like `if`, not e.g. individual `elif` branches.
# [SC1123](https://github.com/koalaman/shellcheck/wiki/SC1123)
# disable=SC1123

# ## ShellCheck directives are only valid in front of complete commands like `case` statements, not individual case branches.
# [SC1124](https://github.com/koalaman/shellcheck/wiki/SC1124)
# disable=SC1124

# ## Invalid `key=value` pair in directive
# [SC1125](https://github.com/koalaman/shellcheck/wiki/SC1125)
# disable=SC1125

# ## Place shellcheck directives before commands, not after.
# [SC1126](https://github.com/koalaman/shellcheck/wiki/SC1126)
# disable=SC1126

# ## Was this intended as a comment? Use `#` in sh.
# [SC1127](https://github.com/koalaman/shellcheck/wiki/SC1127)
# disable=SC1127

# ## The shebang must be on the first line. Delete blanks and move comments.
# [SC1128](https://github.com/koalaman/shellcheck/wiki/SC1128)
# disable=SC1128

# ## You need a space before the `!`.
# [SC1129](https://github.com/koalaman/shellcheck/wiki/SC1129)
# disable=SC1129

# ## You need a space before the :.
# [SC1130](https://github.com/koalaman/shellcheck/wiki/SC1130)
# disable=SC1130

# ## Use `elif` to start another branch.
# [SC1131](https://github.com/koalaman/shellcheck/wiki/SC1131)
# disable=SC1131

# ## This `&` terminates the command. Escape it or add space after `&` to silence.
# [SC1132](https://github.com/koalaman/shellcheck/wiki/SC1132)
# disable=SC1132

# ## Unexpected start of line. If breaking lines, `|`/`||`/`&&` should be at the end of the previous one.
# [SC1133](https://github.com/koalaman/shellcheck/wiki/SC1133)
# disable=SC1133

# Error parsing `shellcheckrc`:
# [SC1134](https://github.com/koalaman/shellcheck/wiki/SC1134)
# disable=SC1134

# ## Prefer escape over ending quote to make `$` literal. Instead of `"It costs $"5`, use `"It costs \$5"`
# [SC1135](https://github.com/koalaman/shellcheck/wiki/SC1135)
# disable=SC1135

# ## Unexpected characters after terminating `]`. Missing semicolon/linefeed?
# [SC1136](https://github.com/koalaman/shellcheck/wiki/SC1136)
# disable=SC1136

# ## Missing second `(` to start arithmetic for ((;;)) loop
# [SC1137](https://github.com/koalaman/shellcheck/wiki/SC1137)
# disable=SC1137

# ## Shells are space sensitive. Use `< <(cmd)`, not `<< (cmd)`.
# [SC1138](https://github.com/koalaman/shellcheck/wiki/SC1138)
# disable=SC1138

# ## Use `||` instead of `-o` between test commands.
# [SC1139](https://github.com/koalaman/shellcheck/wiki/SC1139)
# disable=SC1139

# ## Unexpected parameters after condition. Missing `&&`/`||`, or bad expression?
# [SC1140](https://github.com/koalaman/shellcheck/wiki/SC1140)
# disable=SC1140

# ## Unexpected tokens after compound command. Bad redirection or missing `;`/`&&`/`||`/`|`?
# [SC1141](https://github.com/koalaman/shellcheck/wiki/SC1141)
# disable=SC1141

# ##  Use `done < <(cmd)` to redirect from process substitution (currently missing one `<`).
# [SC1142](https://github.com/koalaman/shellcheck/wiki/SC1142)
# disable=SC1142

# ## This backslash is part of a comment and does not continue the line.
# [SC1143](https://github.com/koalaman/shellcheck/wiki/SC1143)
# disable=SC1143

# ## `external-sources` can only be enabled in .shellcheckrc, not in individual files.
# [SC1144](https://github.com/koalaman/shellcheck/wiki/SC1144)
# disable=SC1144

# ## Unknown `external-sources` value. Expected `true`/`false`.
# [SC1145](https://github.com/koalaman/shellcheck/wiki/SC1145)
# disable=SC1145

# # See if you can use `${#variable}` instead
# [SC2000](https://github.com/koalaman/shellcheck/wiki/SC2000)
# disable=SC2000

# ## See if you can use `${variable//search/replace}` instead.
# [SC2001](https://github.com/koalaman/shellcheck/wiki/SC2001)
# disable=SC2001

# # Useless cat. Consider `cmd < file | ..` or `cmd file | ..` instead.
# [SC2002](https://github.com/koalaman/shellcheck/wiki/SC2002)
# disable=SC2002

# # expr is antiquated. Consider rewriting this using `$((..))`, `${}` or `[[  ]]`.
# [SC2003](https://github.com/koalaman/shellcheck/wiki/SC2003)
# disable=SC2003

# # `$`/`${}` is unnecessary on arithmetic variables.
# [SC2004](https://github.com/koalaman/shellcheck/wiki/SC2004)
# disable=SC2004

# Useless `echo`? Instead of `echo $(cmd)`, just use `cmd`
# [SC2005](https://github.com/koalaman/shellcheck/wiki/SC2005)
# disable=SC2005

# # Use `$(...)` notation instead of legacy backticked `` `...` ``.
# [SC2006](https://github.com/koalaman/shellcheck/wiki/SC2006)
# disable=SC2006

# ## Use `$((..))` instead of deprecated `$[..]`.
# [SC2007](https://github.com/koalaman/shellcheck/wiki/SC2007)
# disable=SC2007

# ## `echo` doesn't read from stdin, are you sure you should be piping to it?
# [SC2008](https://github.com/koalaman/shellcheck/wiki/SC2008)
# disable=SC2008

# ## Consider using `pgrep` instead of grepping `ps` output.
# [SC2009](https://github.com/koalaman/shellcheck/wiki/SC2009)
# disable=SC2009

# ## Don't use `ls | grep`. Use a glob or a for loop with a condition to allow non-alphanumeric filenames.
# [SC2010](https://github.com/koalaman/shellcheck/wiki/SC2010)
# disable=SC2010

# ## Use `find -print0` or `find -exec` to better handle non-alphanumeric filenames.
# [SC2011](https://github.com/koalaman/shellcheck/wiki/SC2011)
# disable=SC2011

# ## Use `find` instead of `ls` to better handle non-alphanumeric filenames.
# [SC2012](https://github.com/koalaman/shellcheck/wiki/SC2012)
# disable=SC2012

# ## To read lines rather than words, pipe/redirect to a `while read` loop.
# [SC2013](https://github.com/koalaman/shellcheck/wiki/SC2013)
# disable=SC2013

# ## This will expand once before find runs, not per file found.
# [SC2014](https://github.com/koalaman/shellcheck/wiki/SC2014)
# disable=SC2014

# # Note that `A && B || C` is not if-then-else. C may run when A is true.
# [SC2015](https://github.com/koalaman/shellcheck/wiki/SC2015)
# disable=SC2015

# # Expressions don't expand in single quotes, use double quotes for that.
# [SC2016](https://github.com/koalaman/shellcheck/wiki/SC2016)
# disable=SC2016

# ## Increase precision by replacing `a/b*c` with `a*c/b`.
# [SC2017](https://github.com/koalaman/shellcheck/wiki/SC2017)
# disable=SC2017

# ## Use `[:lower:]` to support accents and foreign alphabets.
# [SC2018](https://github.com/koalaman/shellcheck/wiki/SC2018)
# disable=SC2018

# ## Use `[:upper:]` to support accents and foreign alphabets.
# [SC2019](https://github.com/koalaman/shellcheck/wiki/SC2019)
# disable=SC2019

# ## `tr` replaces sets of chars, not words (mentioned due to duplicates).
# [SC2020](https://github.com/koalaman/shellcheck/wiki/SC2020)
# disable=SC2020

# ## Don't use `[]` around ranges in `tr`, it replaces literal square brackets.
# [SC2021](https://github.com/koalaman/shellcheck/wiki/SC2021)
# disable=SC2021

# ## Note that unlike globs, `o*` here matches `ooo` but not `oscar`.
# [SC2022](https://github.com/koalaman/shellcheck/wiki/SC2022)
# disable=SC2022

# ## The shell may override `time` as seen in man time(1). Use `command time ..` for that one.
# [SC2023](https://github.com/koalaman/shellcheck/wiki/SC2023)
# disable=SC2023

# ## `sudo` doesn't affect redirects. Use `..| sudo tee file`
# [SC2024](https://github.com/koalaman/shellcheck/wiki/SC2024)
# disable=SC2024

# ## Make sure all escape sequences are enclosed in `\[..\]` to prevent line wrapping issues.
# [SC2025](https://github.com/koalaman/shellcheck/wiki/SC2025)
# disable=SC2025

# ## This word is outside of quotes. Did you intend to `'nest '"'single quotes'"'` instead'?
# [SC2026](https://github.com/koalaman/shellcheck/wiki/SC2026)
# disable=SC2026

# ## The surrounding quotes actually unquote this. Remove or escape them.
# [SC2027](https://github.com/koalaman/shellcheck/wiki/SC2027)
# disable=SC2027

# ## `echo` won't expand escape sequences. Consider `printf`.
# [SC2028](https://github.com/koalaman/shellcheck/wiki/SC2028)
# disable=SC2028

# ## Note that, unescaped, this expands on the client side.
# [SC2029](https://github.com/koalaman/shellcheck/wiki/SC2029)
# disable=SC2029

# # Modification of var is local (to subshell caused by pipeline).
# [SC2030](https://github.com/koalaman/shellcheck/wiki/SC2030)
# disable=SC2030

# # var was modified in a subshell. That change might be lost.
# [SC2031](https://github.com/koalaman/shellcheck/wiki/SC2031)
# disable=SC2031

# # This function can't be invoked via su on line 42.
# [SC2032](https://github.com/koalaman/shellcheck/wiki/SC2032)
# disable=SC2032

# # Shell functions can't be passed to external commands. Use separate script or sh -c.
# [SC2033](https://github.com/koalaman/shellcheck/wiki/SC2033)
# disable=SC2033

# # foo appears unused. Verify it or export it.
# [SC2034](https://github.com/koalaman/shellcheck/wiki/SC2034)
# disable=SC2034

# ## Use `./*glob*` or `-- *glob*` so names with dashes won't become options.
# [SC2035](https://github.com/koalaman/shellcheck/wiki/SC2035)
# disable=SC2035

# ## If you wanted to assign the output of the pipeline, use `a=$(b | c)` .
# [SC2036](https://github.com/koalaman/shellcheck/wiki/SC2036)
# disable=SC2036

# ##  To assign the output of a command, use `var=$(cmd)` .
# [SC2037](https://github.com/koalaman/shellcheck/wiki/SC2037)
# disable=SC2037

# ## Use `-print0`/`-0` or `find -exec +` to allow for non-alphanumeric filenames.
# [SC2038](https://github.com/koalaman/shellcheck/wiki/SC2038)
# disable=SC2038

# ## In POSIX sh, *something* is undefined.
# [SC2039](https://github.com/koalaman/shellcheck/wiki/SC2039)
# disable=SC2039

# ## `#!/bin/sh` was specified, so ____ is not supported, even when sh is actually bash.
# [SC2040](https://github.com/koalaman/shellcheck/wiki/SC2040)
# disable=SC2040

# ## This is a literal string. To run as a command, use `$(..)` instead of `'..'` .
# [SC2041](https://github.com/koalaman/shellcheck/wiki/SC2041)
# disable=SC2041

# ## Use spaces, not commas, to separate loop elements.
# [SC2042](https://github.com/koalaman/shellcheck/wiki/SC2042)
# disable=SC2042

# ## This loop will only ever run once for a constant value. Did you perhaps mean to loop over `dir/*`, `$var` or `$(cmd)`?
# [SC2043](https://github.com/koalaman/shellcheck/wiki/SC2043)
# disable=SC2043

# ## For loops over find output are fragile. Use `find -exec` or a `while read` loop.
# [SC2044](https://github.com/koalaman/shellcheck/wiki/SC2044)
# disable=SC2044

# ## Iterating over ls output is fragile. Use globs.
# [SC2045](https://github.com/koalaman/shellcheck/wiki/SC2045)
# disable=SC2045

# ## Quote this to prevent word splitting.
# [SC2046](https://github.com/koalaman/shellcheck/wiki/SC2046)
# disable=SC2046

# ## Use `"$@"` (with quotes) to prevent whitespace problems.
# [SC2048](https://github.com/koalaman/shellcheck/wiki/SC2048)
# disable=SC2048

# ## `=~` is for regex, but this looks like a glob. Use `=` instead.
# [SC2049](https://github.com/koalaman/shellcheck/wiki/SC2049)
# disable=SC2049

# ## This expression is constant. Did you forget the `$` on a variable?
# [SC2050](https://github.com/koalaman/shellcheck/wiki/SC2050)
# disable=SC2050

# ## Bash doesn't support variables in brace range expansions.
# [SC2051](https://github.com/koalaman/shellcheck/wiki/SC2051)
# disable=SC2051

# ## Quote the rhs of `=` in `[[ ]]` to prevent glob matching.
# [SC2053](https://github.com/koalaman/shellcheck/wiki/SC2053)
# disable=SC2053

# ## Use spaces, not commas, to separate array elements.
# [SC2054](https://github.com/koalaman/shellcheck/wiki/SC2054)
# disable=SC2054

# ## You probably wanted `&&` here, otherwise it's always true.
# [SC2055](https://github.com/koalaman/shellcheck/wiki/SC2055)
# disable=SC2055

# ## You probably wanted `&&` here
# [SC2056](https://github.com/koalaman/shellcheck/wiki/SC2056)
# disable=SC2056

# ## Unknown binary operator.
# [SC2057](https://github.com/koalaman/shellcheck/wiki/SC2057)
# disable=SC2057

# ## Unknown unary operator.
# [SC2058](https://github.com/koalaman/shellcheck/wiki/SC2058)
# disable=SC2058

# # Don't use variables in the `printf` format string. Use `printf "..%s.." "$foo"`.
# [SC2059](https://github.com/koalaman/shellcheck/wiki/SC2059)
# disable=SC2059

# # Quote parameters to tr to prevent glob expansion.
# [SC2060](https://github.com/koalaman/shellcheck/wiki/SC2060)
# disable=SC2060

# ## Quote the parameter to `-name` so the shell won't interpret it.
# [SC2061](https://github.com/koalaman/shellcheck/wiki/SC2061)
# disable=SC2061

# # Quote the grep pattern so the shell won't interpret it.
# [SC2062](https://github.com/koalaman/shellcheck/wiki/SC2062)
# disable=SC2062

# ## Grep uses regex, but this looks like a glob.
# [SC2063](https://github.com/koalaman/shellcheck/wiki/SC2063)
# disable=SC2063

# ## Use single quotes, otherwise this expands now rather than when signalled.
# [SC2064](https://github.com/koalaman/shellcheck/wiki/SC2064)
# disable=SC2064

# ## This is interpreted as a shell file redirection, not a comparison.
# [SC2065](https://github.com/koalaman/shellcheck/wiki/SC2065)
# disable=SC2065

# ## Since you double quoted this, it will not word split, and the loop will only run once.
# [SC2066](https://github.com/koalaman/shellcheck/wiki/SC2066)
# disable=SC2066

# ## Missing `;` or `+` terminating `-exec`. You can't use `|`/`||`/`&&`, and `;` has to be a separate, quoted argument.
# [SC2067](https://github.com/koalaman/shellcheck/wiki/SC2067)
# disable=SC2067

# ## Double quote array expansions to avoid re-splitting elements.
# [SC2068](https://github.com/koalaman/shellcheck/wiki/SC2068)
# disable=SC2068

# ## To redirect stdout+stderr, `2>&1` must be last (or use `{ cmd > file; } 2>&1` to clarify).
# [SC2069](https://github.com/koalaman/shellcheck/wiki/SC2069)
# disable=SC2069

# ## `-n` doesn't work with unquoted arguments. Quote or use `[[ ]]`.
# [SC2070](https://github.com/koalaman/shellcheck/wiki/SC2070)
# disable=SC2070

# ## `>` is for string comparisons. Use `-gt` instead.
# [SC2071](https://github.com/koalaman/shellcheck/wiki/SC2071)
# disable=SC2071

# ## Decimals are not supported. Either use integers only, or use `bc` or `awk` to compare.
# [SC2072](https://github.com/koalaman/shellcheck/wiki/SC2072)
# disable=SC2072

# ## Escape `\<` to prevent it redirecting (or switch to `[[ .. ]]`).
# [SC2073](https://github.com/koalaman/shellcheck/wiki/SC2073)
# disable=SC2073

# ## Can't use `=~` in `[ ]`. Use `[[..]]` instead.
# [SC2074](https://github.com/koalaman/shellcheck/wiki/SC2074)
# disable=SC2074

# ## Escaping `\<` is required in `[..]`, but invalid in `[[..]]`
# [SC2075](https://github.com/koalaman/shellcheck/wiki/SC2075)
# disable=SC2075

# ## Don't quote rhs of `=~`, it'll match literally rather than as a regex.
# [SC2076](https://github.com/koalaman/shellcheck/wiki/SC2076)
# disable=SC2076

# ## You need spaces around the comparison operator.
# [SC2077](https://github.com/koalaman/shellcheck/wiki/SC2077)
# disable=SC2077

# ## This expression is constant. Did you forget a `$` somewhere?
# [SC2078](https://github.com/koalaman/shellcheck/wiki/SC2078)
# disable=SC2078

# ## `(( ))` doesn't support decimals. Use `bc` or `awk`.
# [SC2079](https://github.com/koalaman/shellcheck/wiki/SC2079)
# disable=SC2079

# ## Numbers with leading 0 are considered octal.
# [SC2080](https://github.com/koalaman/shellcheck/wiki/SC2080)
# disable=SC2080

# ## `[ .. ]` can't match globs. Use `[[ .. ]]` or grep.
# [SC2081](https://github.com/koalaman/shellcheck/wiki/SC2081)
# disable=SC2081

# ## To expand via indirection, use `name="foo$n"; echo "${!name}"`.
# [SC2082](https://github.com/koalaman/shellcheck/wiki/SC2082)
# disable=SC2082

# ## Don't add spaces after the slash in `./file`.
# [SC2083](https://github.com/koalaman/shellcheck/wiki/SC2083)
# disable=SC2083

# ## Remove `$` or use `_=$((expr))` to avoid executing output.
# [SC2084](https://github.com/koalaman/shellcheck/wiki/SC2084)
# disable=SC2084

# ## Double quote to prevent globbing and word splitting.
# [SC2086](https://github.com/koalaman/shellcheck/wiki/SC2086)
# disable=SC2086

# ## Quote `EOF` to make here document expansions happen on the server side rather than on the client.
# [SC2087](https://github.com/koalaman/shellcheck/wiki/SC2087)
# disable=SC2087

# ## Tilde does not expand in quotes. Use `$HOME`.
# [SC2088](https://github.com/koalaman/shellcheck/wiki/SC2088)
# disable=SC2088

# # Quotes/backslashes will be treated literally. Use an array.
# [SC2089](https://github.com/koalaman/shellcheck/wiki/SC2089)
# disable=SC2089

# # Quotes/backslashes in this variable will not be respected.
# [SC2090](https://github.com/koalaman/shellcheck/wiki/SC2090)
# disable=SC2090

# ## Remove surrounding `$()` to avoid executing output (or use `eval` if intentional).
# [SC2091](https://github.com/koalaman/shellcheck/wiki/SC2091)
# disable=SC2091

# ## Remove backticks to avoid executing output.
# [SC2092](https://github.com/koalaman/shellcheck/wiki/SC2092)
# disable=SC2092

# ## Remove `exec ` if script should continue after this command.
# [SC2093](https://github.com/koalaman/shellcheck/wiki/SC2093)
# disable=SC2093

# ## Make sure not to read and write the same file in the same pipeline.
# [SC2094](https://github.com/koalaman/shellcheck/wiki/SC2094)
# disable=SC2094

# ## Use `ssh -n` to prevent ssh from swallowing stdin.
# [SC2095](https://github.com/koalaman/shellcheck/wiki/SC2095)
# disable=SC2095

# ## On most OS, shebangs can only specify a single parameter.
# [SC2096](https://github.com/koalaman/shellcheck/wiki/SC2096)
# disable=SC2096

# ## This assignment is only seen by the forked process.
# [SC2097](https://github.com/koalaman/shellcheck/wiki/SC2097)
# disable=SC2097

# ## This expansion will not see the mentioned assignment.
# [SC2098](https://github.com/koalaman/shellcheck/wiki/SC2098)
# disable=SC2098

# ## Use `$((..))` for arithmetics, e.g. `i=$((i + 2))`
# [SC2099](https://github.com/koalaman/shellcheck/wiki/SC2099)
# disable=SC2099

# ## Use `$((..))` for arithmetics, e.g. `i=$((i + 2))`
# [SC2100](https://github.com/koalaman/shellcheck/wiki/SC2100)
# disable=SC2100

# ## Named class needs outer `[]`, e.g. `[[:digit:]]`.
# [SC2101](https://github.com/koalaman/shellcheck/wiki/SC2101)
# disable=SC2101

# ## Ranges can only match single chars (mentioned due to duplicates).
# [SC2102](https://github.com/koalaman/shellcheck/wiki/SC2102)
# disable=SC2102

# ## Use a `( subshell )` to avoid having to `cd` back.
# [SC2103](https://github.com/koalaman/shellcheck/wiki/SC2103)
# disable=SC2103

# ## In functions, use `return` instead of `break`.
# [SC2104](https://github.com/koalaman/shellcheck/wiki/SC2104)
# disable=SC2104

# ## `break` is only valid in loops
# [SC2105](https://github.com/koalaman/shellcheck/wiki/SC2105)
# disable=SC2105

# ## This only exits the subshell caused by the pipeline.
# [SC2106](https://github.com/koalaman/shellcheck/wiki/SC2106)
# disable=SC2106

# ## Instead of `[ a && b ]`, use `[ a ] && [ b ]`.
# [SC2107](https://github.com/koalaman/shellcheck/wiki/SC2107)
# disable=SC2107

# ## In `[[..]]`, use `&&` instead of `-a`.
# [SC2108](https://github.com/koalaman/shellcheck/wiki/SC2108)
# disable=SC2108

# ## Instead of `[ a || b ]`, use `[ a ] || [ b ]`.
# [SC2109](https://github.com/koalaman/shellcheck/wiki/SC2109)
# disable=SC2109

# ## In `[[..]]`, use `||` instead of `-o`.
# [SC2110](https://github.com/koalaman/shellcheck/wiki/SC2110)
# disable=SC2110

# ## ksh does not allow `function` keyword and `()` at the same time.
# [SC2111](https://github.com/koalaman/shellcheck/wiki/SC2111)
# disable=SC2111

# ## `function` keyword is non-standard. Delete it.
# [SC2112](https://github.com/koalaman/shellcheck/wiki/SC2112)
# disable=SC2112

# ## `function` keyword is non-standard. Use `foo()` instead of `function foo`.
# [SC2113](https://github.com/koalaman/shellcheck/wiki/SC2113)
# disable=SC2113

# ## Warning: deletes a system directory.
# [SC2114](https://github.com/koalaman/shellcheck/wiki/SC2114)
# disable=SC2114

# ## Use `"${var:?}"` to ensure this never expands to `/*` .
# [SC2115](https://github.com/koalaman/shellcheck/wiki/SC2115)
# disable=SC2115

# ## Useless echo? Instead of `cmd $(echo foo)`, just use `cmd foo`.
# [SC2116](https://github.com/koalaman/shellcheck/wiki/SC2116)
# disable=SC2116

# ## To run commands as another user, use `su -c` or `sudo`.
# [SC2117](https://github.com/koalaman/shellcheck/wiki/SC2117)
# disable=SC2117

# ## Ksh does not support `|&`. Use `2>&1 |`
# [SC2118](https://github.com/koalaman/shellcheck/wiki/SC2118)
# disable=SC2118

# ## Use `foo "$@"` if function's `$1` should mean script's `$1`.
# [SC2119](https://github.com/koalaman/shellcheck/wiki/SC2119)
# disable=SC2119

# # foo references arguments, but none are ever passed.
# [SC2120](https://github.com/koalaman/shellcheck/wiki/SC2120)
# disable=SC2120

# ## To assign a variable, use just `var=value`, not `set ..`.
# [SC2121](https://github.com/koalaman/shellcheck/wiki/SC2121)
# disable=SC2121

# ## `>=` is not a valid operator. Use `! a < b` instead.
# [SC2122](https://github.com/koalaman/shellcheck/wiki/SC2122)
# disable=SC2122

# ## `PATH` is the shell search path. Use another name.
# [SC2123](https://github.com/koalaman/shellcheck/wiki/SC2123)
# disable=SC2123

# ## Assigning an array to a string! Assign as array, or use `*` instead of `@` to concatenate.
# [SC2124](https://github.com/koalaman/shellcheck/wiki/SC2124)
# disable=SC2124

# ## Brace expansions and globs are literal in assignments. Quote it or use an array.
# [SC2125](https://github.com/koalaman/shellcheck/wiki/SC2125)
# disable=SC2125

# ## Consider using `grep -c` instead of `grep | wc`
# [SC2126](https://github.com/koalaman/shellcheck/wiki/SC2126)
# disable=SC2126

# ## To use `${ ..; }`, specify `#!/usr/bin/env ksh`.
# [SC2127](https://github.com/koalaman/shellcheck/wiki/SC2127)
# disable=SC2127

# ## Expanding an array without an index only gives the element in the index 0.
# [SC2128](https://github.com/koalaman/shellcheck/wiki/SC2128)
# disable=SC2128

# ## Consider using `{ cmd1; cmd2; } >> file` instead of individual redirects.
# [SC2129](https://github.com/koalaman/shellcheck/wiki/SC2129)
# disable=SC2129

# ## `-eq` is for integer comparisons. Use `=` instead.
# [SC2130](https://github.com/koalaman/shellcheck/wiki/SC2130)
# disable=SC2130

# ## This expands when defined, not when used. Consider escaping.
# [SC2139](https://github.com/koalaman/shellcheck/wiki/SC2139)
# disable=SC2139

# ##  Word is of the form `"A"B"C"` (B indicated). Did you mean `"ABC"` or `"A\\"B\\"C"`?
# [SC2140](https://github.com/koalaman/shellcheck/wiki/SC2140)
# disable=SC2140

# ## Did you mean `IFS=$'\t'` ?
# [SC2141](https://github.com/koalaman/shellcheck/wiki/SC2141)
# disable=SC2141

# ## Aliases can't use positional parameters. Use a function.
# [SC2142](https://github.com/koalaman/shellcheck/wiki/SC2142)
# disable=SC2142

# ## Use `grep -q` instead of comparing output with `[ -n .. ]`.
# [SC2143](https://github.com/koalaman/shellcheck/wiki/SC2143)
# disable=SC2143

# ## `-e` doesn't work with globs. Use a `for` loop.
# [SC2144](https://github.com/koalaman/shellcheck/wiki/SC2144)
# disable=SC2144

# ## Argument mixes string and array. Use `*` or separate argument.
# [SC2145](https://github.com/koalaman/shellcheck/wiki/SC2145)
# disable=SC2145

# ## This action ignores everything before the `-o`. Use `\( \)` to group.
# [SC2146](https://github.com/koalaman/shellcheck/wiki/SC2146)
# disable=SC2146

# ##  Literal tilde in PATH works poorly across programs.
# [SC2147](https://github.com/koalaman/shellcheck/wiki/SC2147)
# disable=SC2147

# ##  Tips depend on target shell and yours is unknown. Add a shebang.
# [SC2148](https://github.com/koalaman/shellcheck/wiki/SC2148)
# disable=SC2148

# ## Remove `$`/`${}` for numeric index, or escape it for string.
# [SC2149](https://github.com/koalaman/shellcheck/wiki/SC2149)
# disable=SC2149

# ## `-exec` does not automatically invoke a shell. Use `-exec sh -c ..` for that.
# [SC2150](https://github.com/koalaman/shellcheck/wiki/SC2150)
# disable=SC2150

# ## Only one integer 0-255 can be returned. Use stdout for other data.
# [SC2151](https://github.com/koalaman/shellcheck/wiki/SC2151)
# disable=SC2151

# ## Can only return 0-255. Other data should be written to stdout.
# [SC2152](https://github.com/koalaman/shellcheck/wiki/SC2152)
# disable=SC2152

# ## Possible Misspelling: MYVARIABLE may not be assigned. Did you mean MY_VARIABLE?
# [SC2153](https://github.com/koalaman/shellcheck/wiki/SC2153)
# disable=SC2153

# ## var is referenced but not assigned.
# [SC2154](https://github.com/koalaman/shellcheck/wiki/SC2154)
# disable=SC2154

# ## Declare and assign separately to avoid masking return values.
# [SC2155](https://github.com/koalaman/shellcheck/wiki/SC2155)
# disable=SC2155

# ## Injecting filenames is fragile and insecure. Use parameters.
# [SC2156](https://github.com/koalaman/shellcheck/wiki/SC2156)
# disable=SC2156

# ## Argument to implicit `-n` is always true due to literal strings.
# [SC2157](https://github.com/koalaman/shellcheck/wiki/SC2157)
# disable=SC2157

# ## `[ false ]` is true. Remove the brackets
# [SC2158](https://github.com/koalaman/shellcheck/wiki/SC2158)
# disable=SC2158

# ## `[ 0 ]` is true. Use `false` instead.
# [SC2159](https://github.com/koalaman/shellcheck/wiki/SC2159)
# disable=SC2159

# ## Instead of `[ true ]`, just use `true`.
# [SC2160](https://github.com/koalaman/shellcheck/wiki/SC2160)
# disable=SC2160

# ## Instead of `[ 1 ]`, use `true`.
# [SC2161](https://github.com/koalaman/shellcheck/wiki/SC2161)
# disable=SC2161

# ## `read` without `-r` will mangle backslashes.
# [SC2162](https://github.com/koalaman/shellcheck/wiki/SC2162)
# disable=SC2162

# ## This does not export `FOO`. Remove `$`/`${}` for that, or use `${var?}` to quiet.
# [SC2163](https://github.com/koalaman/shellcheck/wiki/SC2163)
# disable=SC2163

# ## Use `cd ... || exit` in case `cd` fails.
# [SC2164](https://github.com/koalaman/shellcheck/wiki/SC2164)
# disable=SC2164

# ## This nested loop overrides the index variable of its parent.
# [SC2165](https://github.com/koalaman/shellcheck/wiki/SC2165)
# disable=SC2165

# ## Prefer `[ p ] && [ q ]` as `[ p -a q ]` is not well defined.
# [SC2166](https://github.com/koalaman/shellcheck/wiki/SC2166)
# disable=SC2166

# ## This parent loop has its index variable overridden.
# [SC2167](https://github.com/koalaman/shellcheck/wiki/SC2167)
# disable=SC2167

# ## `local` is only valid in functions.
# [SC2168](https://github.com/koalaman/shellcheck/wiki/SC2168)
# disable=SC2168

# ## In dash, *something* is not supported.
# [SC2169](https://github.com/koalaman/shellcheck/wiki/SC2169)
# disable=SC2169

# ## Invalid number for `-eq`. Use `=` to compare as string (or use `$var` to expand as a variable).
# [SC2170](https://github.com/koalaman/shellcheck/wiki/SC2170)
# disable=SC2170

# ## Found trailing `]` outside test. Add missing `[` or quote if intentional.
# [SC2171](https://github.com/koalaman/shellcheck/wiki/SC2171)
# disable=SC2171

# ## Trapping signals by number is not well defined. Prefer signal names.
# [SC2172](https://github.com/koalaman/shellcheck/wiki/SC2172)
# disable=SC2172

# ## SIGKILL/SIGSTOP can not be trapped.
# [SC2173](https://github.com/koalaman/shellcheck/wiki/SC2173)
# disable=SC2173

# ## When used with `-p`, `-m` only applies to the deepest directory.
# [SC2174](https://github.com/koalaman/shellcheck/wiki/SC2174)
# disable=SC2174

# ## Quote this invalid brace expansion since it should be passed literally to eval
# [SC2175](https://github.com/koalaman/shellcheck/wiki/SC2175)
# disable=SC2175

# ## `time` is undefined for pipelines. time single stage or `bash -c` instead.
# [SC2176](https://github.com/koalaman/shellcheck/wiki/SC2176)
# disable=SC2176

# ## `time` is undefined for compound commands, use `time sh -c` instead.
# [SC2177](https://github.com/koalaman/shellcheck/wiki/SC2177)
# disable=SC2177

# ## Variable was used as an array but is now assigned a string.
# [SC2178](https://github.com/koalaman/shellcheck/wiki/SC2178)
# disable=SC2178

# ## Use `array+=("item")` to append items to an array.
# [SC2179](https://github.com/koalaman/shellcheck/wiki/SC2179)
# disable=SC2179

# ## Bash does not support multidimensional arrays. Use 1D or associative arrays.
# [SC2180](https://github.com/koalaman/shellcheck/wiki/SC2180)
# disable=SC2180

# ## Check exit code directly with e.g. `if mycmd;`, not indirectly with `$?`.
# [SC2181](https://github.com/koalaman/shellcheck/wiki/SC2181)
# disable=SC2181

# ## This printf format string has no variables. Other arguments are ignored.
# [SC2182](https://github.com/koalaman/shellcheck/wiki/SC2182)
# disable=SC2182

# ## This format string has 2 variables, but is passed 1 arguments.
# [SC2183](https://github.com/koalaman/shellcheck/wiki/SC2183)
# disable=SC2183

# ## Quote arguments to unset so they're not glob expanded.
# [SC2184](https://github.com/koalaman/shellcheck/wiki/SC2184)
# disable=SC2184

# ## Some finds don't have a default path. Specify `.` explicitly.
# [SC2185](https://github.com/koalaman/shellcheck/wiki/SC2185)
# disable=SC2185

# ## tempfile is deprecated. Use mktemp instead.
# [SC2186](https://github.com/koalaman/shellcheck/wiki/SC2186)
# disable=SC2186

# ## Ash scripts will be checked as Dash. Add `# shellcheck shell=dash` to silence.
# [SC2187](https://github.com/koalaman/shellcheck/wiki/SC2187)
# disable=SC2187

# ## This redirection doesn't have a command. Move to its command (or use `true` as no-op).
# [SC2188](https://github.com/koalaman/shellcheck/wiki/SC2188)
# disable=SC2188

# ## You can't have `|` between this redirection and the command it should apply to.
# [SC2189](https://github.com/koalaman/shellcheck/wiki/SC2189)
# disable=SC2189

# ## Elements in associative arrays need index, e.g. `array=( [index]=value )` .
# [SC2190](https://github.com/koalaman/shellcheck/wiki/SC2190)
# disable=SC2190

# ## The `=` here is literal. To assign by index, use `( [index]=value )` with no spaces. To keep as literal, quote it.
# [SC2191](https://github.com/koalaman/shellcheck/wiki/SC2191)
# disable=SC2191

# ## This array element has no value. Remove spaces after `=` or use `""` for empty string.
# [SC2192](https://github.com/koalaman/shellcheck/wiki/SC2192)
# disable=SC2192

# ## The arguments to this comparison can never be equal. Make sure your syntax is correct.
# [SC2193](https://github.com/koalaman/shellcheck/wiki/SC2193)
# disable=SC2193

# ## This word is constant. Did you forget the `$` on a variable?
# [SC2194](https://github.com/koalaman/shellcheck/wiki/SC2194)
# disable=SC2194

# ## This pattern will never match the case statement's word. Double check them.
# [SC2195](https://github.com/koalaman/shellcheck/wiki/SC2195)
# disable=SC2195

# ## `egrep` is non-standard and deprecated. Use `grep -E` instead.
# [SC2196](https://github.com/koalaman/shellcheck/wiki/SC2196)
# disable=SC2196

# ## `fgrep` is non-standard and deprecated. Use `grep -F` instead.
# [SC2197](https://github.com/koalaman/shellcheck/wiki/SC2197)
# disable=SC2197

# ## Arrays don't work as operands in `[ ]`. Use a loop (or concatenate with `*` instead of `@`).
# [SC2198](https://github.com/koalaman/shellcheck/wiki/SC2198)
# disable=SC2198

# ## Arrays implicitly concatenate in `[[ ]]`. Use a loop (or explicit `*` instead of `@`).
# [SC2199](https://github.com/koalaman/shellcheck/wiki/SC2199)
# disable=SC2199

# ## Brace expansions don't work as operands in `[ ]`. Use a loop.
# [SC2200](https://github.com/koalaman/shellcheck/wiki/SC2200)
# disable=SC2200

# ## Brace expansion doesn't happen in `[[ ]]`. Use a loop.
# [SC2201](https://github.com/koalaman/shellcheck/wiki/SC2201)
# disable=SC2201

# ## Globs don't work as operands in `[ ]`. Use a loop.
# [SC2202](https://github.com/koalaman/shellcheck/wiki/SC2202)
# disable=SC2202

# ## Globs are ignored in `[[ ]]` except right of `=`/`!=`. Use a loop.
# [SC2203](https://github.com/koalaman/shellcheck/wiki/SC2203)
# disable=SC2203

# ## `(..)` is a subshell. Did you mean `[ .. ]`, a test expression?
# [SC2204](https://github.com/koalaman/shellcheck/wiki/SC2204)
# disable=SC2204

# ## `(..)` is a subshell. Did you mean `[ .. ]`, a test expression?
# [SC2205](https://github.com/koalaman/shellcheck/wiki/SC2205)
# disable=SC2205

# ## Quote to prevent word splitting/globbing, or split robustly with mapfile or `read -a`.
# [SC2206](https://github.com/koalaman/shellcheck/wiki/SC2206)
# disable=SC2206

# ## Prefer `mapfile` or `read -a` to split command output (or quote to avoid splitting).
# [SC2207](https://github.com/koalaman/shellcheck/wiki/SC2207)
# disable=SC2207

# ## Use `[[ ]]` or quote arguments to `-v` to avoid glob expansion.
# [SC2208](https://github.com/koalaman/shellcheck/wiki/SC2208)
# disable=SC2208

# ## Use `var=$(command)` to assign output (or quote to assign string).
# [SC2209](https://github.com/koalaman/shellcheck/wiki/SC2209)
# disable=SC2209

# ## This is a file redirection. Was it supposed to be a comparison or fd operation?
# [SC2210](https://github.com/koalaman/shellcheck/wiki/SC2210)
# disable=SC2210

# ## This is a glob used as a command name. Was it supposed to be in `${..}`, array, or is it missing quoting?
# [SC2211](https://github.com/koalaman/shellcheck/wiki/SC2211)
# disable=SC2211

# ## Use `false` instead of empty `[`/`[[` conditionals.
# [SC2212](https://github.com/koalaman/shellcheck/wiki/SC2212)
# disable=SC2212

# ## getopts specified `-n`, but it's not handled by this `case`.
# [SC2213](https://github.com/koalaman/shellcheck/wiki/SC2213)
# disable=SC2213

# ## This case is not specified by getopts.
# [SC2214](https://github.com/koalaman/shellcheck/wiki/SC2214)
# disable=SC2214

# ## This flag is used as a command name. Bad line break or missing `[ .. ]`?
# [SC2215](https://github.com/koalaman/shellcheck/wiki/SC2215)
# disable=SC2215

# ## Piping to `rm`, a command that doesn't read stdin. Wrong command or missing `xargs`?
# [SC2216](https://github.com/koalaman/shellcheck/wiki/SC2216)
# disable=SC2216

# ## Redirecting to `echo`, a command that doesn't read stdin. Bad quoting or missing `xargs`?
# [SC2217](https://github.com/koalaman/shellcheck/wiki/SC2217)
# disable=SC2217

# ## This function is only defined later. Move the definition up.
# [SC2218](https://github.com/koalaman/shellcheck/wiki/SC2218)
# disable=SC2218

# ## Instead of `let expr`, prefer `(( expr ))` .
# [SC2219](https://github.com/koalaman/shellcheck/wiki/SC2219)
# disable=SC2219

# ## Invalid flags are not handled. Add a `*)` case.
# [SC2220](https://github.com/koalaman/shellcheck/wiki/SC2220)
# disable=SC2220

# ## This pattern always overrides a later one.
# [SC2221](https://github.com/koalaman/shellcheck/wiki/SC2221)
# disable=SC2221

# ## This pattern never matches because of a previous pattern.
# [SC2222](https://github.com/koalaman/shellcheck/wiki/SC2222)
# disable=SC2222

# ## This default assignment may cause DoS due to globbing. Quote it.
# [SC2223](https://github.com/koalaman/shellcheck/wiki/SC2223)
# disable=SC2223

# ## This `mv` has no destination. Check the arguments.
# [SC2224](https://github.com/koalaman/shellcheck/wiki/SC2224)
# disable=SC2224

# ## This `cp` has no destination. Check the arguments.
# [SC2225](https://github.com/koalaman/shellcheck/wiki/SC2225)
# disable=SC2225

# ## This `ln` has no destination. Check the arguments, or specify `.` explicitly.
# [SC2226](https://github.com/koalaman/shellcheck/wiki/SC2226)
# disable=SC2226

# ## Redirection applies to the find command itself. Rewrite to work per action (or move to end).
# [SC2227](https://github.com/koalaman/shellcheck/wiki/SC2227)
# disable=SC2227

# ## This does not read `foo`. Remove `$`/`${}` for that, or use `${var?}` to quiet.
# [SC2229](https://github.com/koalaman/shellcheck/wiki/SC2229)
# disable=SC2229

# ## `which` is non-standard. Use builtin `command -v` instead.
# [SC2230](https://github.com/koalaman/shellcheck/wiki/SC2230)
# disable=SC2230

# ## Quote expansions in this `for` loop glob to prevent wordsplitting, e.g. `"$dir"/*.txt` .
# [SC2231](https://github.com/koalaman/shellcheck/wiki/SC2231)
# disable=SC2231

# ## Can't use `sudo` with builtins like `cd`. Did you want `sudo sh -c ..` instead?
# [SC2232](https://github.com/koalaman/shellcheck/wiki/SC2232)
# disable=SC2232

# ## Remove superfluous `(..)` around condition to avoid subshell overhead.
# [SC2233](https://github.com/koalaman/shellcheck/wiki/SC2233)
# disable=SC2233

# ## Remove superfluous `(..)` around test command to avoid subshell overhead.
# [SC2234](https://github.com/koalaman/shellcheck/wiki/SC2234)
# disable=SC2234

# ## Use `{ ..; }` instead of `(..)` to avoid subshell overhead.
# [SC2235](https://github.com/koalaman/shellcheck/wiki/SC2235)
# disable=SC2235

# ## Use `-n` instead of `! -z`.
# [SC2236](https://github.com/koalaman/shellcheck/wiki/SC2236)
# disable=SC2236

# ## Use `[ -n .. ]` instead of `! [ -z .. ]`.
# [SC2237](https://github.com/koalaman/shellcheck/wiki/SC2237)
# disable=SC2237

# ## Redirecting to/from command name instead of file. Did you want pipes/xargs (or quote to ignore)?
# [SC2238](https://github.com/koalaman/shellcheck/wiki/SC2238)
# disable=SC2238

# ## Ensure the shebang uses the absolute path to the interpreter.
# [SC2239](https://github.com/koalaman/shellcheck/wiki/SC2239)
# disable=SC2239

# ## The dot command does not support arguments in sh/dash. Set them as variables.
# [SC2240](https://github.com/koalaman/shellcheck/wiki/SC2240)
# disable=SC2240

# ## The exit status can only be one integer 0-255. Use stdout for other data.
# [SC2241](https://github.com/koalaman/shellcheck/wiki/SC2241)
# disable=SC2241

# ## Can only exit with status 0-255. Other data should be written to stdout/stderr.
# [SC2242](https://github.com/koalaman/shellcheck/wiki/SC2242)
# disable=SC2242

# ## Prefer explicit `-n` to check for output (or run command without `[`/`[[` to check for success)
# [SC2243](https://github.com/koalaman/shellcheck/wiki/SC2243)
# disable=SC2243

# ## Prefer explicit `-n` to check non-empty string (or use `=`/`-ne` to check boolean/integer).
# [SC2244](https://github.com/koalaman/shellcheck/wiki/SC2244)
# disable=SC2244

# ## -d only applies to the first expansion of this glob. Use a loop to check any/all.
# [SC2245](https://github.com/koalaman/shellcheck/wiki/SC2245)
# disable=SC2245

# ## This shebang specifies a directory. Ensure the interpreter is a file.
# [SC2246](https://github.com/koalaman/shellcheck/wiki/SC2246)
# disable=SC2246

# ## Flip leading `$` and `"` if this should be a quoted substitution.
# [SC2247](https://github.com/koalaman/shellcheck/wiki/SC2247)
# disable=SC2247

# # Prefer double quoting even when variables don't contain special characters.
# [SC2248](https://github.com/koalaman/shellcheck/wiki/SC2248)
# disable=SC2248

# ## Consider adding a default `*)` case, even if it just exits with error.
# [SC2249](https://github.com/koalaman/shellcheck/wiki/SC2249)
# disable=SC2249

# ## Prefer putting braces around variable references even when not strictly required.
# [SC2250](https://github.com/koalaman/shellcheck/wiki/SC2250)
# disable=SC2250

# ## This `!` is not on a condition and skips errexit. Use `&& exit 1` instead, or make sure `$?` is checked.
# [SC2251](https://github.com/koalaman/shellcheck/wiki/SC2251)
# disable=SC2251

# ## You probably wanted `&&` here, otherwise it's always true.
# [SC2252](https://github.com/koalaman/shellcheck/wiki/SC2252)
# disable=SC2252

# ## Use `-R` to recurse, or explicitly `a-r` to remove read permissions.
# [SC2253](https://github.com/koalaman/shellcheck/wiki/SC2253)
# disable=SC2253

# ## Quote expansions in case patterns to match literally rather than as a glob.
# [SC2254](https://github.com/koalaman/shellcheck/wiki/SC2254)
# disable=SC2254

# ##  `[ ]` does not apply arithmetic evaluation. Evaluate with `$((..))` for numbers, or use string comparator for strings.
# [SC2255](https://github.com/koalaman/shellcheck/wiki/SC2255)
# disable=SC2255

# ## This translated string is the name of a variable. Flip leading `$` and `"` if this should be a quoted substitution.
# [SC2256](https://github.com/koalaman/shellcheck/wiki/SC2256)
# disable=SC2256

# ## Arithmetic modifications in command redirections may be discarded. Do them separately.
# [SC2257](https://github.com/koalaman/shellcheck/wiki/SC2257)
# disable=SC2257

# ## This redirection overrides piped input. To use both, merge or pass filenames.
# [SC2259](https://github.com/koalaman/shellcheck/wiki/SC2259)
# disable=SC2259

# ## This redirection overrides the output pipe. Use `tee` to output to both.
# [SC2260](https://github.com/koalaman/shellcheck/wiki/SC2260)
# disable=SC2260

# ## Multiple redirections compete for stdout. Use `cat`, `tee`, or pass filenames instead.
# [SC2261](https://github.com/koalaman/shellcheck/wiki/SC2261)
# disable=SC2261

# ## This alias can't be defined and used in the same parsing unit. Use a function instead.
# [SC2262](https://github.com/koalaman/shellcheck/wiki/SC2262)
# disable=SC2262

# ## Since they're in the same parsing unit, this command will not refer to the previously mentioned alias.
# [SC2263](https://github.com/koalaman/shellcheck/wiki/SC2263)
# disable=SC2263

# ## This function unconditionally re-invokes itself. Missing `command`?
# [SC2264](https://github.com/koalaman/shellcheck/wiki/SC2264)
# disable=SC2264

# ##  Use && for logical AND. Single & will background and return true.
# [SC2265](https://github.com/koalaman/shellcheck/wiki/SC2265)
# disable=SC2265

# ##  Use && for logical AND. Single & will background and return true.
# [SC2266](https://github.com/koalaman/shellcheck/wiki/SC2266)
# disable=SC2266

# ## GNU `xargs -i` is deprecated in favor of `-I{}`
# [SC2267](https://github.com/koalaman/shellcheck/wiki/SC2267)
# disable=SC2267

# ## Avoid x-prefix in comparisons as it no longer serves a purpose.
# [SC2268](https://github.com/koalaman/shellcheck/wiki/SC2268)
# disable=SC2268

# ## This variable is assigned to itself, so the assignment does nothing.
# [SC2269](https://github.com/koalaman/shellcheck/wiki/SC2269)
# disable=SC2269

# ## To assign positional parameters, use `set -- first second ..` (or use `[ ]` to compare).
# [SC2270](https://github.com/koalaman/shellcheck/wiki/SC2270)
# disable=SC2270

# ## For indirection, use arrays, `declare "var$n=value"`, or (for sh) read/eval
# [SC2271](https://github.com/koalaman/shellcheck/wiki/SC2271)
# disable=SC2271

# ## Command name contains `==`. For comparison, use `[ "$var" = value ]`.
# [SC2272](https://github.com/koalaman/shellcheck/wiki/SC2272)
# disable=SC2272

# ## Sequence of `===`s found. Merge conflict or intended as a commented border?
# [SC2273](https://github.com/koalaman/shellcheck/wiki/SC2273)
# disable=SC2273

# ##  Command name starts with `===`. Intended as a commented border?
# [SC2274](https://github.com/koalaman/shellcheck/wiki/SC2274)
# disable=SC2274

# ## Command name starts with `=`. Bad line break?
# [SC2275](https://github.com/koalaman/shellcheck/wiki/SC2275)
# disable=SC2275

# ## This is interpreted as a command name containing `=`. Bad assignment or comparison?
# [SC2276](https://github.com/koalaman/shellcheck/wiki/SC2276)
# disable=SC2276

# ## Use `BASH_ARGV0` to assign to `$0` in bash (or use `[ ]` to compare).
# [SC2277](https://github.com/koalaman/shellcheck/wiki/SC2277)
# disable=SC2277

# ## `$0` can't be assigned in Ksh (but it does reflect the current function).
# [SC2278](https://github.com/koalaman/shellcheck/wiki/SC2278)
# disable=SC2278

# ## `$0` can't be assigned in Dash. This becomes a command name.
# [SC2279](https://github.com/koalaman/shellcheck/wiki/SC2279)
# disable=SC2279

# ## `$0` can't be assigned this way, and there is no portable alternative.
# [SC2280](https://github.com/koalaman/shellcheck/wiki/SC2280)
# disable=SC2280

# ## Don't use `$`/`${}` on the left side of assignments.
# [SC2281](https://github.com/koalaman/shellcheck/wiki/SC2281)
# disable=SC2281

# ## Variable names can't start with numbers, so this is interpreted as a command.
# [SC2282](https://github.com/koalaman/shellcheck/wiki/SC2282)
# disable=SC2282

# ## Use `[ ]` to compare values, or remove spaces around `=` to assign (or quote `'='` if literal).
# [SC2283](https://github.com/koalaman/shellcheck/wiki/SC2283)
# disable=SC2283

# ## Use `[ x = y ]` to compare values (or quote `'=='` if literal).
# [SC2284](https://github.com/koalaman/shellcheck/wiki/SC2284)
# disable=SC2284

# ## Remove spaces around `+=` to assign (or quote `'+='` if literal).
# [SC2285](https://github.com/koalaman/shellcheck/wiki/SC2285)
# disable=SC2285

# ## This empty string is interpreted as a command name. Double check syntax (or use 'true' as a no-op).
# [SC2286](https://github.com/koalaman/shellcheck/wiki/SC2286)
# disable=SC2286

# ## This is interpreted as a command name ending with '/'. Double check syntax.
# [SC2287](https://github.com/koalaman/shellcheck/wiki/SC2287)
# disable=SC2287

# ## This is interpreted as a command name ending with apostrophe. Double check syntax.
# [SC2288](https://github.com/koalaman/shellcheck/wiki/SC2288)
# disable=SC2288

# ## This is interpreted as a command name containing a linefeed. Double check syntax.
# [SC2289](https://github.com/koalaman/shellcheck/wiki/SC2289)
# disable=SC2289

# ## Remove spaces around = to assign.
# [SC2290](https://github.com/koalaman/shellcheck/wiki/SC2290)
# disable=SC2290

# ## Quote repeated spaces to avoid them collapsing into one.
# [SC2291](https://github.com/koalaman/shellcheck/wiki/SC2291)
# disable=SC2291

# ## Prefer `[[ ]]` over `[ ]` for tests in Bash/Ksh.
# [SC2292](https://github.com/koalaman/shellcheck/wiki/SC2292)
# disable=SC2292

# ## When eval'ing @Q-quoted words, use * rather than @ as the index.
# [SC2293](https://github.com/koalaman/shellcheck/wiki/SC2293)
# disable=SC2293

# ## eval negates the benefit of arrays. Drop eval to preserve whitespace/symbols (or eval as string).
# [SC2294](https://github.com/koalaman/shellcheck/wiki/SC2294)
# disable=SC2294

# ## Expansions inside `${..}` need to be quoted separately, otherwise they will match as a pattern.
# [SC2295](https://github.com/koalaman/shellcheck/wiki/SC2295)
# disable=SC2295

# ## Parameter expansions can't start with `{`. Double check syntax.
# [SC2296](https://github.com/koalaman/shellcheck/wiki/SC2296)
# disable=SC2296

# ## Double quotes must be outside `${}`: `${"invalid"}` vs `"${valid}"`.
# [SC2297](https://github.com/koalaman/shellcheck/wiki/SC2297)
# disable=SC2297

# ##  `${$x}` is invalid. For expansion, use ${x}. For indirection, use arrays, ${!x} or (for sh) eval.
# [SC2298](https://github.com/koalaman/shellcheck/wiki/SC2298)
# disable=SC2298

# ## Parameter expansions can't be nested. Use temporary variables.
# [SC2299](https://github.com/koalaman/shellcheck/wiki/SC2299)
# disable=SC2299

# ## Parameter expansion can't be applied to command substitutions. Use temporary variables.
# [SC2300](https://github.com/koalaman/shellcheck/wiki/SC2300)
# disable=SC2300

# ## Parameter expansion starts with unexpected quotes. Double check syntax.
# [SC2301](https://github.com/koalaman/shellcheck/wiki/SC2301)
# disable=SC2301

# ## This loops over values. To loop over keys, use `"${!array[@]}"`.
# [SC2302](https://github.com/koalaman/shellcheck/wiki/SC2302)
# disable=SC2302

# ## `i` is an array value, not a key. Use directly or loop over keys instead.
# [SC2303](https://github.com/koalaman/shellcheck/wiki/SC2303)
# disable=SC2303

# ## `*` must be escaped to multiply: `\*`. Modern `$((x * y))` avoids this issue.
# [SC2304](https://github.com/koalaman/shellcheck/wiki/SC2304)
# disable=SC2304

# ## Quote regex argument to expr to avoid it expanding as a glob.
# [SC2305](https://github.com/koalaman/shellcheck/wiki/SC2305)
# disable=SC2305

# ## Escape glob characters in arguments to expr to avoid pathname expansion.
# [SC2306](https://github.com/koalaman/shellcheck/wiki/SC2306)
# disable=SC2306

# ## 'expr' expects 3+ arguments but sees 1. Make sure each operator/operand is a separate argument, and escape <>&|.
# [SC2307](https://github.com/koalaman/shellcheck/wiki/SC2307)
# disable=SC2307

# ## `expr length` has unspecified results. Prefer `${#var}`.
# [SC2308](https://github.com/koalaman/shellcheck/wiki/SC2308)
# disable=SC2308

# ## -eq treats this as a variable. Use = to compare as string (or expand explicitly with $var)
# [SC2309](https://github.com/koalaman/shellcheck/wiki/SC2309)
# disable=SC2309

# ## This function is invoked in an 'if' condition so set -e will be disabled. Invoke separately if failures should cause the script to exit.
# [SC2310](https://github.com/koalaman/shellcheck/wiki/SC2310)
# disable=SC2310

# ## Bash implicitly disabled set -e for this function invocation because it's inside a command substitution. Add set -e; before it or enable inherit_errexit.
# [SC2311](https://github.com/koalaman/shellcheck/wiki/SC2311)
# disable=SC2311

# ## Consider invoking this command separately to avoid masking its return value (or use '|| true' to ignore).
# [SC2312](https://github.com/koalaman/shellcheck/wiki/SC2312)
# disable=SC2312

# ## Quote array indices to avoid them expanding as globs.
# [SC2313](https://github.com/koalaman/shellcheck/wiki/SC2313)
# disable=SC2313

# ## In bats, `!` does not cause a test failure.
# [SC2314](https://github.com/koalaman/shellcheck/wiki/SC2314)
# disable=SC2314

# ## In bats, `!` does not cause a test failure. Fold the `!` into the conditional!
# [SC2315](https://github.com/koalaman/shellcheck/wiki/SC2315)
# disable=SC2315

# ## This applies local to the variable named readonly, which is probably not what you want. Use a separate command or the appropriate `declare` options instead.
# [SC2316](https://github.com/koalaman/shellcheck/wiki/SC2316)
# disable=SC2316

# ## Command appears to be unreachable. Check usage (or ignore if invoked indirectly).
# [SC2317](https://github.com/koalaman/shellcheck/wiki/SC2317)
# disable=SC2317

# ## This assignment is used again in this `declare`, but won't have taken effect. Use two `declare`s.
# [SC2318](https://github.com/koalaman/shellcheck/wiki/SC2318)
# disable=SC2318

# ## This `$?` refers to a condition, not a command. Assign to a variable to avoid it being overwritten.
# [SC2319](https://github.com/koalaman/shellcheck/wiki/SC2319)
# disable=SC2319

# ## This `$?` refers to echo/printf, not a previous command. Assign to variable to avoid it being overwritten.
# [SC2320](https://github.com/koalaman/shellcheck/wiki/SC2320)
# disable=SC2320

# ## Array indices are already arithmetic contexts. Prefer removing the `$((` and `))`.
# [SC2321](https://github.com/koalaman/shellcheck/wiki/SC2321)
# disable=SC2321

# ##  In arithmetic contexts, `((x))` is the same as `(x)`. Prefer only one layer of parentheses.
# [SC2322](https://github.com/koalaman/shellcheck/wiki/SC2322)
# disable=SC2322

# ##  `a[(x)]` is the same as `a[x]`. Prefer not wrapping in additional parentheses.
# [SC2323](https://github.com/koalaman/shellcheck/wiki/SC2323)
# disable=SC2323

# ## var+=1 will append, not increment. Use (( var += 1 )), declare -i var, or quote number to silence.
# [SC2324](https://github.com/koalaman/shellcheck/wiki/SC2324)
# disable=SC2324

# ## Multiple ! in front of pipelines are a bash/ksh extension. Use only 0 or 1.
# [SC2325](https://github.com/koalaman/shellcheck/wiki/SC2325)
# disable=SC2325

# ##  ! is not allowed in the middle of pipelines. Use command group as in `cmd | { ! cmd; }` if necessary.
# [SC2326](https://github.com/koalaman/shellcheck/wiki/SC2326)
# disable=SC2326

# ## In POSIX sh, process substitution is undefined.
# [SC3001](https://github.com/koalaman/shellcheck/wiki/SC3001)
# disable=SC3001

# ## In POSIX sh, extglob is undefined.
# [SC3002](https://github.com/koalaman/shellcheck/wiki/SC3002)
# disable=SC3002

# ## In POSIX sh, `$'..'` is undefined.
# [SC3003](https://github.com/koalaman/shellcheck/wiki/SC3003)
# disable=SC3003

# ## In POSIX sh, $".." is undefined
# [SC3004](https://github.com/koalaman/shellcheck/wiki/SC3004)
# disable=SC3004

# ## In POSIX sh, arithmetic for loops are undefined.
# [SC3005](https://github.com/koalaman/shellcheck/wiki/SC3005)
# disable=SC3005

# ## In POSIX sh, standalone `((..))` is undefined.
# [SC3006](https://github.com/koalaman/shellcheck/wiki/SC3006)
# disable=SC3006

# ## In POSIX sh, `$[..]` in place of `$((..))` is undefined.
# [SC3007](https://github.com/koalaman/shellcheck/wiki/SC3007)
# disable=SC3007

# ## In POSIX sh, select loops are undefined.
# [SC3008](https://github.com/koalaman/shellcheck/wiki/SC3008)
# disable=SC3008

# ## In POSIX `sh`, brace expansion is undefined.
# [SC3009](https://github.com/koalaman/shellcheck/wiki/SC3009)
# disable=SC3009

# ## In POSIX sh, `[[ ]]` is undefined.
# [SC3010](https://github.com/koalaman/shellcheck/wiki/SC3010)
# disable=SC3010

# ## In POSIX sh, here-strings are undefined.
# [SC3011](https://github.com/koalaman/shellcheck/wiki/SC3011)
# disable=SC3011

# ## In POSIX sh, lexicographical `\<` is undefined.
# [SC3012](https://github.com/koalaman/shellcheck/wiki/SC3012)
# disable=SC3012

# ## In POSIX sh, `-nt` is undefined.
# [SC3013](https://github.com/koalaman/shellcheck/wiki/SC3013)
# disable=SC3013

# ## In POSIX sh, `==` in place of `=` is undefined.
# [SC3014](https://github.com/koalaman/shellcheck/wiki/SC3014)
# disable=SC3014

# ## In POSIX sh, `=~` regex matching is undefined.
# [SC3015](https://github.com/koalaman/shellcheck/wiki/SC3015)
# disable=SC3015

# ## In POSIX sh, unary `-v` (in place of `[ -n "${var+x}" ]`) is undefined.
# [SC3016](https://github.com/koalaman/shellcheck/wiki/SC3016)
# disable=SC3016

# ## In POSIX sh, unary `-a` in place of `-e` is undefined.
# [SC3017](https://github.com/koalaman/shellcheck/wiki/SC3017)
# disable=SC3017

# ## In POSIX sh, `++` is undefined.
# [SC3018](https://github.com/koalaman/shellcheck/wiki/SC3018)
# disable=SC3018

# ## In POSIX sh, exponentials are undefined.
# [SC3019](https://github.com/koalaman/shellcheck/wiki/SC3019)
# disable=SC3019

# ## In POSIX sh, `&>` is undefined.
# [SC3020](https://github.com/koalaman/shellcheck/wiki/SC3020)
# disable=SC3020

# ## In POSIX sh, `>& filename` (as opposed to `>& fd`) is undefined.
# [SC3021](https://github.com/koalaman/shellcheck/wiki/SC3021)
# disable=SC3021

# ## In POSIX sh, named file descriptors is undefined.
# [SC3022](https://github.com/koalaman/shellcheck/wiki/SC3022)
# disable=SC3022

# ## In POSIX sh, FDs outside of 0-9 are undefined.
# [SC3023](https://github.com/koalaman/shellcheck/wiki/SC3023)
# disable=SC3023

# ## In POSIX sh, `+=` is undefined.
# [SC3024](https://github.com/koalaman/shellcheck/wiki/SC3024)
# disable=SC3024

# ## In POSIX sh, `/dev/{tcp,udp}` is undefined.
# [SC3025](https://github.com/koalaman/shellcheck/wiki/SC3025)
# disable=SC3025

# ## In POSIX sh, `^` in place of `!` in glob bracket expressions is undefined.
# [SC3026](https://github.com/koalaman/shellcheck/wiki/SC3026)
# disable=SC3026

# ## In POSIX sh, VARIABLE is undefined.
# [SC3028](https://github.com/koalaman/shellcheck/wiki/SC3028)
# disable=SC3028

# ## In POSIX sh, `|&` in place of `2>&1 |` is undefined.
# [SC3029](https://github.com/koalaman/shellcheck/wiki/SC3029)
# disable=SC3029

# ## In POSIX sh, arrays are undefined.
# [SC3030](https://github.com/koalaman/shellcheck/wiki/SC3030)
# disable=SC3030

# ## In POSIX sh, redirecting from/to globs is undefined.
# [SC3031](https://github.com/koalaman/shellcheck/wiki/SC3031)
# disable=SC3031

# ## In POSIX sh, coproc is undefined.
# [SC3032](https://github.com/koalaman/shellcheck/wiki/SC3032)
# disable=SC3032

# ## In POSIX sh, naming functions outside [a-zA-Z_][a-zA-Z0-9_]* is undefined.
# [SC3033](https://github.com/koalaman/shellcheck/wiki/SC3033)
# disable=SC3033

# ## In POSIX sh, `$(<file)` is undefined.
# [SC3034](https://github.com/koalaman/shellcheck/wiki/SC3034)
# disable=SC3034

# ## In POSIX sh, `` `<file` `` is undefined.
# [SC3035](https://github.com/koalaman/shellcheck/wiki/SC3035)
# disable=SC3035

# ## In Dash, echo flags besides -n are not supported.
# [SC3036](https://github.com/koalaman/shellcheck/wiki/SC3036)
# disable=SC3036

# ## In POSIX sh, echo flags are undefined.
# [SC3037](https://github.com/koalaman/shellcheck/wiki/SC3037)
# disable=SC3037

# ## In POSIX sh, exec flags are undefined.
# [SC3038](https://github.com/koalaman/shellcheck/wiki/SC3038)
# disable=SC3038

# ## In POSIX sh, `let` is undefined.
# [SC3039](https://github.com/koalaman/shellcheck/wiki/SC3039)
# disable=SC3039

# ## In POSIX sh, set option *[name]* is undefined.
# [SC3040](https://github.com/koalaman/shellcheck/wiki/SC3040)
# disable=SC3040

# ## In POSIX sh, set flag `-E` is undefined
# [SC3041](https://github.com/koalaman/shellcheck/wiki/SC3041)
# disable=SC3041

# ## In POSIX sh, set flag `--default` is undefined
# [SC3042](https://github.com/koalaman/shellcheck/wiki/SC3042)
# disable=SC3042

# ## In POSIX sh, `local` is undefined.
# [SC3043](https://github.com/koalaman/shellcheck/wiki/SC3043)
# disable=SC3043

# ## In POSIX sh, `declare` is undefined.
# [SC3044](https://github.com/koalaman/shellcheck/wiki/SC3044)
# disable=SC3044

# ## In POSIX sh, some-command-with-flag is undefined.
# [SC3045](https://github.com/koalaman/shellcheck/wiki/SC3045)
# disable=SC3045

# ## In POSIX sh, `source` in place of `.` is undefined.
# [SC3046](https://github.com/koalaman/shellcheck/wiki/SC3046)
# disable=SC3046

# ## In POSIX sh, trapping ERR is undefined.
# [SC3047](https://github.com/koalaman/shellcheck/wiki/SC3047)
# disable=SC3047

# ## In POSIX sh, prefixing signal names with 'SIG' is undefined.
# [SC3048](https://github.com/koalaman/shellcheck/wiki/SC3048)
# disable=SC3048

# ## In POSIX sh, using lower/mixed case for signal names is undefined.
# [SC3049](https://github.com/koalaman/shellcheck/wiki/SC3049)
# disable=SC3049

# ## In POSIX sh, `printf %q` is undefined.
# [SC3050](https://github.com/koalaman/shellcheck/wiki/SC3050)
# disable=SC3050

# ## In POSIX sh, `source` in place of `.` is undefined
# [SC3051](https://github.com/koalaman/shellcheck/wiki/SC3051)
# disable=SC3051

# ## In POSIX sh, arithmetic base conversion is undefined
# [SC3052](https://github.com/koalaman/shellcheck/wiki/SC3052)
# disable=SC3052

# ## In POSIX sh, indirect expansion is undefined.
# [SC3053](https://github.com/koalaman/shellcheck/wiki/SC3053)
# disable=SC3053

# ## In POSIX sh, array references are undefined.
# [SC3054](https://github.com/koalaman/shellcheck/wiki/SC3054)
# disable=SC3054

# ## In POSIX sh, array key expansion is undefined.
# [SC3055](https://github.com/koalaman/shellcheck/wiki/SC3055)
# disable=SC3055

# ## In POSIX sh, name matching prefixes are undefined.
# [SC3056](https://github.com/koalaman/shellcheck/wiki/SC3056)
# disable=SC3056

# ## In POSIX sh, string indexing is undefined.
# [SC3057](https://github.com/koalaman/shellcheck/wiki/SC3057)
# disable=SC3057

# Case modification is not supported in dash and undefined in POSIX sh.
# [SC3059](https://github.com/koalaman/shellcheck/wiki/SC3059)
# disable=SC3059

# ## In POSIX sh, string replacement is undefined.
# [SC3060](https://github.com/koalaman/shellcheck/wiki/SC3060)
# disable=SC3060

# if fi
# [SCXXXX](https://github.com/koalaman/shellcheck/wiki/SCXXXX)
# disable=SCXXXX
